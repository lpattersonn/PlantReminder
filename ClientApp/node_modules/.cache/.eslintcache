[{"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js":"1","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js":"2","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js":"3","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js":"4","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js":"5","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js":"6","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js":"7"},{"size":521,"mtime":1645244473930,"results":"8","hashOfConfig":"9"},{"size":2667,"mtime":1645244446943,"results":"10","hashOfConfig":"9"},{"size":4121,"mtime":1644637719510,"results":"11","hashOfConfig":"9"},{"size":163,"mtime":1645244377778,"results":"12","hashOfConfig":"9"},{"size":4315,"mtime":1645244382059,"results":"13","hashOfConfig":"9"},{"size":1929,"mtime":1645244370419,"results":"14","hashOfConfig":"9"},{"size":47,"mtime":1645244634335,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hqqc1h",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js",["32","33","34"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js",[],["35","36","37"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js",["38","39","40","41","42","43","44","45","46"],"// Imports\nimport React from \"react\";\n\n// Plant component\nexport default function Plants(props) {\n  const plantList = props.plants.map((plant) => {\n    // Todays date\n    const today = new Date();\n\n    // Plant index\n    const plantIndex = props.plants.findIndex((thisPlant) => {\n      thisPlant.id === plant.id;\n    });\n\n    const index = (plantID) => {\n      for (let i = 0; i < props.plants.length; i++) {\n        if (plantID === props.plants[i].id) {\n          return i;\n        }\n      }\n    };\n\n    console.log(index(plant.id));\n\n    // Date from api\n    function toString(watered) {\n      const todaysDate = new Date(watered + \"Z\");\n      return todaysDate.toLocaleString();\n    }\n\n    // Check if plant is well watered\n    function wellWatered(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInSec = today.getTime() - todaysDate.getTime();\n      return diffInSec / 1000 > waterInterval;\n    }\n\n    const id = plant.id;\n\n    function plantButton(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInWater = today.getTime() - todaysDate.getTime();\n\n      if (diffInWater > 30000 && diffInWater < waterInterval) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Thirsty ü§î\n          </button>\n        );\n      } else if (wellWatered(waterInterval, lastWatered)) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Water Me! üò†\n          </button>\n        );\n      } else {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            I'm Full! üòÄ\n          </button>\n        );\n      }\n    }\n\n    function warningButton(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInWater = today.getTime() - todaysDate.getTime();\n      if (diffInWater > 30000 && diffInWater < waterInterval) {\n        return \"#E6D54E\";\n      } else {\n        return \"#74E64E\";\n      }\n    }\n\n    // Table row style\n    const waterStatus = {\n      paddingBottom: \"30px\",\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : warningButton(plant.waterInterval, plant.lastWatered),\n    };\n\n    const waterButtonStatus = {\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : warningButton(plant.waterInterval, plant.lastWatered),\n    };\n\n    return (\n      <tr style={waterStatus}>\n        <td>\n          <img src={plant.img} alt={plant.name} />\n        </td>\n        <td style={waterStatus}>{plant.name}</td>\n        <td style={waterStatus}>{toString(plant.lastWatered)}</td>\n        <td className=\"waterplants-button\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={() => {\n              props.deletePlant(index(plant.id));\n            }}\n          >\n            Remove Plant üòî\n          </button>\n        </td>\n        <td className=\"waterplants-button\" style={waterButtonStatus}>\n          {plantButton(plant.waterInterval, plant.lastWatered)}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Plants</th>\n          <th>Plant Name</th>\n          <th>Last Watered</th>\n          <th>Remove Plant</th>\n          <th className=\"waterplants-button\">\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => {\n                props.waterAllPlants(props.plants);\n              }}\n            >\n              Water All Plants üòç\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{plantList}</tbody>\n    </table>\n  );\n}\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js",["47"],{"ruleId":"48","severity":1,"message":"49","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":15},{"ruleId":"48","severity":1,"message":"52","line":10,"column":10,"nodeType":"50","messageId":"51","endLine":10,"endColumn":22},{"ruleId":"48","severity":1,"message":"53","line":51,"column":11,"nodeType":"50","messageId":"51","endLine":51,"endColumn":22},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"48","severity":1,"message":"60","line":8,"column":11,"nodeType":"50","messageId":"51","endLine":8,"endColumn":16},{"ruleId":"48","severity":1,"message":"61","line":11,"column":11,"nodeType":"50","messageId":"51","endLine":11,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":11,"column":59,"nodeType":"64","messageId":"65","endLine":11,"endColumn":61},{"ruleId":"66","severity":2,"message":"67","line":12,"column":7,"nodeType":"68","messageId":"69","endLine":12,"endColumn":33},{"ruleId":"58","severity":1,"message":"70","line":48,"column":11,"nodeType":"71","endLine":54,"endColumn":12},{"ruleId":"58","severity":1,"message":"70","line":60,"column":11,"nodeType":"71","endLine":66,"endColumn":12},{"ruleId":"58","severity":1,"message":"70","line":72,"column":11,"nodeType":"71","endLine":78,"endColumn":12},{"ruleId":"58","severity":1,"message":"70","line":120,"column":11,"nodeType":"71","endLine":126,"endColumn":12},{"ruleId":"58","severity":1,"message":"70","line":146,"column":13,"nodeType":"71","endLine":152,"endColumn":14},{"ruleId":"48","severity":1,"message":"72","line":1,"column":8,"nodeType":"50","messageId":"51","endLine":1,"endColumn":13},"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'getAllPlants' is defined but never used.","'waterPlants' is assigned a value but never used.","no-native-reassign",["73"],"no-negated-in-lhs",["74"],"jsx-a11y/accessible-emoji",[],"'today' is assigned a value but never used.","'plantIndex' is assigned a value but never used.","array-callback-return","Array.prototype.findIndex() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.","JSXOpeningElement","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]