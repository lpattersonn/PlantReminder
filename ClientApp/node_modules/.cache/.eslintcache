[{"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js":"1","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js":"2","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js":"3","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js":"4","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js":"5","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js":"6","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js":"7"},{"size":521,"mtime":1644637719507,"results":"8","hashOfConfig":"9"},{"size":2565,"mtime":1644947008716,"results":"10","hashOfConfig":"9"},{"size":4121,"mtime":1644637719510,"results":"11","hashOfConfig":"9"},{"size":132,"mtime":1644679511679,"results":"12","hashOfConfig":"9"},{"size":3939,"mtime":1644941526325,"results":"13","hashOfConfig":"9"},{"size":177,"mtime":1644785016292,"results":"14","hashOfConfig":"9"},{"size":1858,"mtime":1644946410757,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1hqqc1h",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js",[],["32","33","34"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js",["35","36","37"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js",["38","39","40","41","42","43"],"import React from \"react\";\n\nexport default function Plants(props) {\n  const plantList = props.plants.map((plant) => {\n    // Todays date\n    const today = new Date();\n\n    // Date from api\n    function toString(watered) {\n      const todaysDate = new Date(watered + \"Z\");\n      return todaysDate.toLocaleString();\n    }\n\n    // Check if plant is well watered\n    function wellWatered(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInSec = today.getTime() - todaysDate.getTime();\n      return diffInSec / 1000 > waterInterval;\n    }\n\n    const id = plant.id;\n\n    function plantButton(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInWater = today.getTime() - todaysDate.getTime();\n\n      if (diffInWater > 30000 && diffInWater < waterInterval) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Thirsty 😠\n          </button>\n        );\n      } else if (wellWatered(waterInterval, lastWatered)) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Water Me! 😠\n          </button>\n        );\n      } else {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            I'm Full! 😀\n          </button>\n        );\n      }\n    }\n\n    function warningButton(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInWater = today.getTime() - todaysDate.getTime();\n      if (diffInWater > 30000 && diffInWater < waterInterval) {\n        return \"#E6D54E\";\n      } else {\n        return \"#74E64E\"\n      }\n    }\n\n    // Table row style\n    const waterStatus = {\n      paddingBottom: \"30px\",\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : warningButton(plant.waterInterval, plant.lastWatered),\n    };\n\n    const waterButtonStatus = {\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : warningButton(plant.waterInterval, plant.lastWatered),\n    };\n\n    return (\n      <tr style={waterStatus}>\n        <td>\n          <img src={plant.img} alt={plant.name} />\n        </td>\n        <td style={waterStatus}>{plant.name}</td>\n        <td style={waterStatus}>{toString(plant.lastWatered)}</td>\n        <td className=\"waterplants-button\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={() => {\n              props.deletePlant(plant.id);\n            }}\n          >\n            Remove Plant 😔\n          </button>\n        </td>\n        <td className=\"waterplants-button\" style={waterButtonStatus}>\n          {plantButton(plant.waterInterval, plant.lastWatered)}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Plants</th>\n          <th>Plant Name</th>\n          <th>Last Watered</th>\n          <th>Remove Plant</th>\n          <th className=\"waterplants-button\">\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => {\n                props.waterAllPlants(props.plants);\n              }}\n            >\n              Water All Plants 😍\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{plantList}</tbody>\n    </table>\n  );\n}\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":3,"column":10,"nodeType":"52","messageId":"53","endLine":3,"endColumn":15},{"ruleId":"50","severity":1,"message":"54","line":10,"column":10,"nodeType":"52","messageId":"53","endLine":10,"endColumn":22},{"ruleId":"50","severity":1,"message":"55","line":53,"column":11,"nodeType":"52","messageId":"53","endLine":53,"endColumn":22},{"ruleId":"50","severity":1,"message":"56","line":6,"column":11,"nodeType":"52","messageId":"53","endLine":6,"endColumn":16},{"ruleId":"48","severity":1,"message":"57","line":31,"column":11,"nodeType":"58","endLine":37,"endColumn":12},{"ruleId":"48","severity":1,"message":"57","line":43,"column":11,"nodeType":"58","endLine":49,"endColumn":12},{"ruleId":"48","severity":1,"message":"57","line":55,"column":11,"nodeType":"58","endLine":61,"endColumn":12},{"ruleId":"48","severity":1,"message":"57","line":103,"column":11,"nodeType":"58","endLine":109,"endColumn":12},{"ruleId":"48","severity":1,"message":"57","line":129,"column":13,"nodeType":"58","endLine":135,"endColumn":14},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"jsx-a11y/accessible-emoji",[],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'getAllPlants' is defined but never used.","'waterPlants' is assigned a value but never used.","'today' is assigned a value but never used.","Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]