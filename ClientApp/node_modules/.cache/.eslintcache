[{"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js":"1","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js":"2","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js":"3","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js":"4","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js":"5","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js":"6","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js":"7"},{"size":521,"mtime":1644637719507,"results":"8","hashOfConfig":"9"},{"size":1716,"mtime":1644890937352,"results":"10","hashOfConfig":"9"},{"size":4121,"mtime":1644637719510,"results":"11","hashOfConfig":"9"},{"size":132,"mtime":1644679511679,"results":"12","hashOfConfig":"9"},{"size":3024,"mtime":1644890628254,"results":"13","hashOfConfig":"9"},{"size":177,"mtime":1644785016292,"results":"14","hashOfConfig":"9"},{"size":1845,"mtime":1644893869630,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1hqqc1h",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js",[],["33","34","35"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js",["36","37","38"],"// Imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Route } from \"react-router\";\r\nimport Header from \"./components/Header.js\";\r\nimport Plants from \"./components/Plants.js\";\r\nimport Form from \"./components/Form.js\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./custom.css\";\r\nimport { getAllPlants } from \"./helper/helper.js\";\r\n\r\n// App\r\nexport default function App() {\r\n  const [plants, setPlants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"/api/plants\").then((res) => {\r\n      setPlants(res.data);\r\n    });\r\n    return () => {\r\n      \"Searching\";\r\n    };\r\n  }, []);\r\n\r\n  // Delete plant\r\n\r\n  // Plant button\r\n  const waterPlant = function (plants, id) {\r\n    const updatedPlant = { ...plants.find((plant) => plant.id === id) };\r\n    const updatedIndex = plants.findIndex((plant) => plant.id === id);\r\n    const day = new Date();\r\n    updatedPlant.lastWatered = day.toISOString().split(\"Z\")[0];\r\n    plants[updatedIndex] = updatedPlant;\r\n    setPlants([...plants]);\r\n    console.log(plants);\r\n  };\r\n\r\n  // Water all plants\r\n  const waterAllPlants = function (plants) {\r\n    const waterPlants = plants.map((plant) => {\r\n      const id = plant.id;\r\n      return waterPlant(plants, id);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"nav\">\r\n        <Header key={1} />\r\n      </section>\r\n      <section className=\"formSection\">\r\n        <h4>Add Plant</h4>\r\n        <Form key={2} plants={plants} setPlants={setPlants} />\r\n      </section>\r\n      <section className=\"plantTable\">\r\n        <Plants\r\n          key={3}\r\n          plants={plants}\r\n          waterPlant={waterPlant}\r\n          waterAllPlants={waterAllPlants}\r\n        />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js",["39","40","41","42","43","44"],"import React, { useState } from \"react\";\n\nexport default function Plants(props) {\n  const plantList = props.plants.map((plant) => {\n    // Todays date\n    const today = new Date();\n\n    // Date from api\n    function toString(watered) {\n      const todaysDate = new Date(watered + \"Z\");\n      return todaysDate.toLocaleString();\n    }\n\n    // Check if plant is well watered\n    function wellWatered(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInSec = today.getTime() - todaysDate.getTime();\n      return diffInSec / 1000 > waterInterval;\n    }\n\n    const id = plant.id;\n\n    function plantButton(waterInterval, lastWatered) {\n      if (wellWatered(waterInterval, lastWatered)) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Water Me! üò†\n          </button>\n        );\n      } else {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            I'm Full! üòÄ\n          </button>\n        );\n      }\n    }\n\n    // Table row style\n    const waterStatus = {\n      paddingBottom: \"30px\",\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : \"#74E64E\",\n    };\n\n    const waterButtonStatus = {\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : \"#74E64E\",\n    };\n\n    return (\n      <tr style={waterStatus}>\n        <td>\n          <img src={plant.img} alt={plant.name} />\n        </td>\n        <td style={waterStatus}>{plant.name}</td>\n        <td style={waterStatus}>{toString(plant.lastWatered)}</td>\n        <td className=\"waterplants-button\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={() => {\n              props.deletePlant(plant.id);\n            }}\n          >\n            Remove Plant üòî\n          </button>\n        </td>\n        <td className=\"waterplants-button\" style={waterButtonStatus}>\n          {plantButton(plant.waterInterval, plant.lastWatered)}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Plants</th>\n          <th>Plant Name</th>\n          <th>Last Watered</th>\n          <th>Remove Plant</th>\n          <th className=\"waterplants-button\">\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => {\n                props.waterAllPlants(props.plants);\n              }}\n            >\n              Water All Plants üòç\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{plantList}</tbody>\n    </table>\n  );\n}\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js",["45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":3,"column":10,"nodeType":"54","messageId":"55","endLine":3,"endColumn":15},{"ruleId":"52","severity":1,"message":"56","line":10,"column":10,"nodeType":"54","messageId":"55","endLine":10,"endColumn":22},{"ruleId":"52","severity":1,"message":"57","line":40,"column":11,"nodeType":"54","messageId":"55","endLine":40,"endColumn":22},{"ruleId":"52","severity":1,"message":"58","line":1,"column":17,"nodeType":"54","messageId":"55","endLine":1,"endColumn":25},{"ruleId":"52","severity":1,"message":"59","line":6,"column":11,"nodeType":"54","messageId":"55","endLine":6,"endColumn":16},{"ruleId":"50","severity":1,"message":"60","line":27,"column":11,"nodeType":"61","endLine":33,"endColumn":12},{"ruleId":"50","severity":1,"message":"60","line":39,"column":11,"nodeType":"61","endLine":45,"endColumn":12},{"ruleId":"50","severity":1,"message":"60","line":76,"column":11,"nodeType":"61","endLine":82,"endColumn":12},{"ruleId":"50","severity":1,"message":"60","line":102,"column":13,"nodeType":"61","endLine":108,"endColumn":14},{"ruleId":"52","severity":1,"message":"62","line":24,"column":11,"nodeType":"54","messageId":"55","endLine":24,"endColumn":21},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"jsx-a11y/accessible-emoji",[],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'getAllPlants' is defined but never used.","'waterPlants' is assigned a value but never used.","'useState' is defined but never used.","'today' is assigned a value but never used.","Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.","JSXOpeningElement","'todaysTime' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]