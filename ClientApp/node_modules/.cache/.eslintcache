[{"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js":"1","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js":"2","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js":"3","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js":"4","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js":"5","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js":"6"},{"size":521,"mtime":1644637719507,"results":"7","hashOfConfig":"8"},{"size":746,"mtime":1644814288428,"results":"9","hashOfConfig":"8"},{"size":4121,"mtime":1644637719510,"results":"10","hashOfConfig":"8"},{"size":132,"mtime":1644679511679,"results":"11","hashOfConfig":"8"},{"size":2742,"mtime":1644807484036,"results":"12","hashOfConfig":"8"},{"size":177,"mtime":1644785016292,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hqqc1h",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js",[],["28","29","30"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js",["31","32"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js",["33","34","35","36","37","38","39"],"import React, {useState} from \"react\";\n\nexport default function Plants(props) {\n\n  const {state, setState} = useState\n\n  const plantList = props.plants.map((plant) => {\n    // Todays date\n    const today = new Date();\n\n    // Date from api\n    function toString(watered) {\n      const todaysDate = new Date(watered + \"Z\");\n      console.log(todaysDate.getTime());\n      return todaysDate.toLocaleString();\n    }\n\n    // Check if plant is well watered\n    function wellWatered(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInSec = today.getTime() - todaysDate.getTime();\n      console.log(lastWatered);\n      return diffInSec / 1000 > waterInterval;\n    }\n \n    // Plant button\n    function waterPlant() {\n      var day = new Date()\n  \n          plant.lastWatered = day.toISOString().split('Z')[0];\n        \n    }\n\n    function plantButton(waterInterval, lastWatered, plant) {\n      if (wellWatered(waterInterval, lastWatered)) {\n        return (\n          <button type=\"button\" class=\"btn btn-danger\" onClick={() => waterPlant()}>\n            Water Me! üò†\n          </button>\n        );\n      } else {\n        return (\n          <button type=\"button\" class=\"btn btn-success\">\n            I'm Full! üòÄ\n          </button>\n        );\n      }\n    }\n\n\n    // Table row style\n    const waterStatus = {\n      paddingBottom: \"30px\",\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : \"#74E64E\",\n    };\n\n    const waterButtonStatus = {\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : \"#74E64E\",\n    };\n\n    return (\n      <tr style={waterStatus}>\n        <td>\n          <img src={plant.img} alt={plant.name} />\n        </td>\n        <td style={waterStatus}>{plant.name}</td>\n        <td style={waterStatus}>{toString(plant.lastWatered)}</td>\n        <td className=\"waterplants-button\">\n        <button type=\"button\" class=\"btn btn-secondary\">Remove Plant  üòî</button>\n        </td>\n        <td className=\"waterplants-button\" style={waterButtonStatus}>\n          {plantButton(plant.waterInterval, plant.lastWatered)}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Plants</th>\n          <th>Plant Name</th>\n          <th>Last Watered</th>\n          <th>Remove Plant</th>\n          <th className=\"waterplants-button\">\n            <button type=\"button\" class=\"btn btn-dark\">\n              Water All Plants  üòç\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{plantList}</tbody>\n    </table>\n  );\n}\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js",[],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":3,"column":10,"nodeType":"48","messageId":"49","endLine":3,"endColumn":15},{"ruleId":"46","severity":1,"message":"50","line":9,"column":10,"nodeType":"48","messageId":"49","endLine":9,"endColumn":22},{"ruleId":"46","severity":1,"message":"51","line":5,"column":10,"nodeType":"48","messageId":"49","endLine":5,"endColumn":15},{"ruleId":"46","severity":1,"message":"52","line":5,"column":17,"nodeType":"48","messageId":"49","endLine":5,"endColumn":25},{"ruleId":"46","severity":1,"message":"53","line":9,"column":11,"nodeType":"48","messageId":"49","endLine":9,"endColumn":16},{"ruleId":"44","severity":1,"message":"54","line":38,"column":11,"nodeType":"55","endLine":38,"endColumn":85},{"ruleId":"44","severity":1,"message":"54","line":44,"column":11,"nodeType":"55","endLine":44,"endColumn":57},{"ruleId":"44","severity":1,"message":"54","line":76,"column":9,"nodeType":"55","endLine":76,"endColumn":57},{"ruleId":"44","severity":1,"message":"54","line":94,"column":13,"nodeType":"55","endLine":94,"endColumn":56},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"jsx-a11y/accessible-emoji",[],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'getAllPlants' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'today' is assigned a value but never used.","Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]