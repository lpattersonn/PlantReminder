[{"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js":"1","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js":"2","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js":"3","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js":"4","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js":"5","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js":"6","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js":"7"},{"size":521,"mtime":1644637719507,"results":"8","hashOfConfig":"9"},{"size":2681,"mtime":1645101401038,"results":"10","hashOfConfig":"9"},{"size":4121,"mtime":1644637719510,"results":"11","hashOfConfig":"9"},{"size":132,"mtime":1644679511679,"results":"12","hashOfConfig":"9"},{"size":4286,"mtime":1645135492329,"results":"13","hashOfConfig":"9"},{"size":177,"mtime":1644948561012,"results":"14","hashOfConfig":"9"},{"size":1896,"mtime":1645129328318,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1hqqc1h",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/index.js",[],["33","34","35"],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/App.js",["36","37","38"],"// Imports\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { Route } from \"react-router\";\r\nimport Header from \"./components/Header.js\";\r\nimport Plants from \"./components/Plants.js\";\r\nimport Form from \"./components/Form.js\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./custom.css\";\r\nimport { getAllPlants } from \"./helper/helper.js\";\r\n\r\n// App\r\nexport default function App() {\r\n  const [plants, setPlants] = useState([]);\r\n\r\n  useEffect(() => {\r\n    axios.get(\"/api/plants\").then((res) => {\r\n      setPlants(res.data);\r\n    });\r\n    return () => {\r\n      \"Searching\";\r\n    };\r\n  }, []);\r\n\r\n  // Delete plant\r\n\r\n  // Plant button\r\n\r\n  const waterPlant = function (plants, id) {\r\n    const day = new Date();\r\n    const dayAndTimeNow = day.getTime();\r\n\r\n    // Find plant\r\n    const updatedPlant = { ...plants.find((plant) => plant.id === id) };\r\n    const updatedIndex = plants.findIndex((plant) => plant.id === id);\r\n\r\n    // Get Plant last watered\r\n    const plantLastWatered = new Date(updatedPlant.lastWatered + \"Z\").getTime();\r\n\r\n    // Find water interval from last watered\r\n    if (dayAndTimeNow - plantLastWatered > 30000) {\r\n      updatedPlant.lastWatered = day.toISOString().split(\"Z\")[0];\r\n      plants[updatedIndex] = updatedPlant;\r\n      setPlants([...plants]);\r\n    } else {\r\n      window.confirm(\r\n        `${updatedPlant.name} is well watered, please wait 30 seconds.`\r\n      );\r\n    }\r\n  };\r\n\r\n  // Water all plants\r\n  const waterAllPlants = function (plants) {\r\n    const waterPlants = plants.map((plant) => {\r\n      const id = plant.id;\r\n      return waterPlant(plants, id);\r\n    });\r\n  };\r\n\r\n  // Delete plant\r\n  const deletePlant = function (id) {\r\n    if (window.confirm(\"Are you sure you want to delete this plant?\")) {\r\n      axios\r\n        .delete(`/api/plants/${id}`)\r\n        .then((res) => {\r\n          return axios.get(\"/api/plants\");\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          setPlants(res.data);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <section className=\"nav\">\r\n        <Header />\r\n      </section>\r\n      <div id=\"body\">\r\n        <section className=\"formSection\">\r\n          <div className=\"formLabel\">\r\n            <h4>Add Plant</h4>\r\n            <Form plants={plants} setPlants={setPlants} />\r\n          </div>\r\n        </section>\r\n        <section className=\"plantTable\">\r\n          <Plants\r\n            key={plants.length}\r\n            plants={plants}\r\n            setPlants={setPlants}\r\n            waterPlant={waterPlant}\r\n            waterAllPlants={waterAllPlants}\r\n            deletePlant={deletePlant}\r\n          />\r\n        </section>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/registerServiceWorker.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Header.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Plants.js",["39","40","41","42","43","44","45","46","47"],"import React from \"react\";\n\nexport default function Plants(props) {\n\n  const plantList = props.plants.map((plant) => {\n    // Todays date\n    const today = new Date();\n\n    // Plant index\n    const plantIndex = props.plants.findIndex((thisPlant) => {\n      thisPlant.id === plant.id;\n    });\n\n    const index = (plantID) => {\n      for (let i = 0; i < props.plants.length; i++) {\n        if (plantID === props.plants[i].id) {\n          return i;\n        }\n      }\n    };\n\n    console.log(index(plant.id));\n\n    // Date from api\n    function toString(watered) {\n      const todaysDate = new Date(watered + \"Z\");\n      return todaysDate.toLocaleString();\n    }\n\n    // Check if plant is well watered\n    function wellWatered(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInSec = today.getTime() - todaysDate.getTime();\n      return diffInSec / 1000 > waterInterval;\n    }\n\n    const id = plant.id;\n\n    function plantButton(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInWater = today.getTime() - todaysDate.getTime();\n\n      if (diffInWater > 30000 && diffInWater < waterInterval) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-warning\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Thirsty 🤔\n          </button>\n        );\n      } else if (wellWatered(waterInterval, lastWatered)) {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            Water Me! 😠\n          </button>\n        );\n      } else {\n        return (\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => {\n              props.waterPlant(props.plants, id);\n            }}\n          >\n            I'm Full! 😀\n          </button>\n        );\n      }\n    }\n\n    function warningButton(waterInterval, lastWatered) {\n      const today = new Date();\n      const todaysDate = new Date(lastWatered + \"Z\");\n      const diffInWater = today.getTime() - todaysDate.getTime();\n      if (diffInWater > 30000 && diffInWater < waterInterval) {\n        return \"#E6D54E\";\n      } else {\n        return \"#74E64E\";\n      }\n    }\n\n    // Table row style\n    const waterStatus = {\n      paddingBottom: \"30px\",\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : warningButton(plant.waterInterval, plant.lastWatered),\n    };\n\n    const waterButtonStatus = {\n      border: \"0.2em solid black\",\n      borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n        ? \"#E6534E\"\n        : warningButton(plant.waterInterval, plant.lastWatered),\n    };\n\n    return (\n      <tr style={waterStatus}>\n        <td>\n          <img src={plant.img} alt={plant.name} />\n        </td>\n        <td style={waterStatus}>{plant.name}</td>\n        <td style={waterStatus}>{toString(plant.lastWatered)}</td>\n        <td className=\"waterplants-button\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            onClick={() => {\n              props.deletePlant(index(plant.id));\n            }}\n          >\n            Remove Plant 😔\n          </button>\n        </td>\n        <td className=\"waterplants-button\" style={waterButtonStatus}>\n          {plantButton(plant.waterInterval, plant.lastWatered)}\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Plants</th>\n          <th>Plant Name</th>\n          <th>Last Watered</th>\n          <th>Remove Plant</th>\n          <th className=\"waterplants-button\">\n            <button\n              type=\"button\"\n              className=\"btn btn-dark\"\n              onClick={() => {\n                props.waterAllPlants(props.plants);\n              }}\n            >\n              Water All Plants 😍\n            </button>\n          </th>\n        </tr>\n      </thead>\n      <tbody>{plantList}</tbody>\n    </table>\n  );\n}\n","/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js",[],"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/components/Form.js",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":10,"nodeType":"56","messageId":"57","endLine":3,"endColumn":15},{"ruleId":"54","severity":1,"message":"58","line":10,"column":10,"nodeType":"56","messageId":"57","endLine":10,"endColumn":22},{"ruleId":"54","severity":1,"message":"59","line":54,"column":11,"nodeType":"56","messageId":"57","endLine":54,"endColumn":22},{"ruleId":"54","severity":1,"message":"60","line":7,"column":11,"nodeType":"56","messageId":"57","endLine":7,"endColumn":16},{"ruleId":"54","severity":1,"message":"61","line":10,"column":11,"nodeType":"56","messageId":"57","endLine":10,"endColumn":21},{"ruleId":"62","severity":1,"message":"63","line":10,"column":59,"nodeType":"64","messageId":"65","endLine":10,"endColumn":61},{"ruleId":"66","severity":2,"message":"67","line":11,"column":7,"nodeType":"68","messageId":"69","endLine":11,"endColumn":33},{"ruleId":"52","severity":1,"message":"70","line":47,"column":11,"nodeType":"71","endLine":53,"endColumn":12},{"ruleId":"52","severity":1,"message":"70","line":59,"column":11,"nodeType":"71","endLine":65,"endColumn":12},{"ruleId":"52","severity":1,"message":"70","line":71,"column":11,"nodeType":"71","endLine":77,"endColumn":12},{"ruleId":"52","severity":1,"message":"70","line":119,"column":11,"nodeType":"71","endLine":125,"endColumn":12},{"ruleId":"52","severity":1,"message":"70","line":145,"column":13,"nodeType":"71","endLine":151,"endColumn":14},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"jsx-a11y/accessible-emoji",[],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'getAllPlants' is defined but never used.","'waterPlants' is assigned a value but never used.","'today' is assigned a value but never used.","'plantIndex' is assigned a value but never used.","array-callback-return","Array.prototype.findIndex() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression","Emojis should be wrapped in <span>, have role=\"img\", and have an accessible description with aria-label or aria-labelledby.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]