{"ast":null,"code":"var _jsxFileName = \"/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst plantList = props.plants.map(plant => {\n  // Todays date\n  const today = new Date(); // Plant index\n\n  const plantIndex = props.plants.findIndex(thisPlant => {\n    thisPlant.id === plant.id;\n  });\n\n  const index = plantID => {\n    for (let i = 0; i < props.plants.length; i++) {\n      if (plantID === props.plants[i].id) {\n        return i;\n      }\n    }\n  };\n\n  console.log(index(plant.id)); // Date from api\n\n  function toString(watered) {\n    const todaysDate = new Date(watered + \"Z\");\n    return todaysDate.toLocaleString();\n  } // Check if plant is well watered\n\n\n  function wellWatered(waterInterval, lastWatered) {\n    const today = new Date();\n    const todaysDate = new Date(lastWatered + \"Z\");\n    const diffInSec = today.getTime() - todaysDate.getTime();\n    return diffInSec / 1000 > waterInterval;\n  }\n\n  const id = plant.id;\n\n  function plantButton(waterInterval, lastWatered) {\n    const today = new Date();\n    const todaysDate = new Date(lastWatered + \"Z\");\n    const diffInWater = today.getTime() - todaysDate.getTime();\n\n    if (diffInWater > 30000 && diffInWater < waterInterval) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-warning\",\n        onClick: () => {\n          props.waterPlant(props.plants, id);\n        },\n        children: \"Thirsty \\uD83E\\uDD14\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this);\n    } else if (wellWatered(waterInterval, lastWatered)) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-danger\",\n        onClick: () => {\n          props.waterPlant(props.plants, id);\n        },\n        children: \"Water Me! \\uD83D\\uDE20\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-success\",\n        onClick: () => {\n          props.waterPlant(props.plants, id);\n        },\n        children: \"I'm Full! \\uD83D\\uDE00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  function warningButton(waterInterval, lastWatered) {\n    const today = new Date();\n    const todaysDate = new Date(lastWatered + \"Z\");\n    const diffInWater = today.getTime() - todaysDate.getTime();\n\n    if (diffInWater > 30000 && diffInWater < waterInterval) {\n      return \"#E6D54E\";\n    } else {\n      return \"#74E64E\";\n    }\n  } // Table row style\n\n\n  const waterStatus = {\n    paddingBottom: \"30px\",\n    border: \"0.2em solid black\",\n    borderColor: wellWatered(plant.waterInterval, plant.lastWatered) ? \"#E6534E\" : warningButton(plant.waterInterval, plant.lastWatered)\n  };\n  const waterButtonStatus = {\n    border: \"0.2em solid black\",\n    borderColor: wellWatered(plant.waterInterval, plant.lastWatered) ? \"#E6534E\" : warningButton(plant.waterInterval, plant.lastWatered)\n  };\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    style: waterStatus,\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: plant.img,\n        alt: plant.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: waterStatus,\n      children: plant.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: waterStatus,\n      children: toString(plant.lastWatered)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"waterplants-button\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn btn-secondary\",\n        onClick: () => {\n          props.deletePlant(index(plant.id));\n        },\n        children: \"Remove Plant \\uD83D\\uDE14\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: \"waterplants-button\",\n      style: waterButtonStatus,\n      children: plantButton(plant.waterInterval, plant.lastWatered)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n});","map":{"version":3,"sources":["/Users/macintoshssd/lighthouse/PlantReminder/ClientApp/src/helper/helper.js"],"names":["React","plantList","props","plants","map","plant","today","Date","plantIndex","findIndex","thisPlant","id","index","plantID","i","length","console","log","toString","watered","todaysDate","toLocaleString","wellWatered","waterInterval","lastWatered","diffInSec","getTime","plantButton","diffInWater","waterPlant","warningButton","waterStatus","paddingBottom","border","borderColor","waterButtonStatus","img","name","deletePlant"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,MAAMC,SAAS,GAAGC,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAkBC,KAAD,IAAW;AAC5C;AACA,QAAMC,KAAK,GAAG,IAAIC,IAAJ,EAAd,CAF4C,CAI5C;;AACA,QAAMC,UAAU,GAAGN,KAAK,CAACC,MAAN,CAAaM,SAAb,CAAwBC,SAAD,IAAe;AACvDA,IAAAA,SAAS,CAACC,EAAV,KAAiBN,KAAK,CAACM,EAAvB;AACD,GAFkB,CAAnB;;AAIA,QAAMC,KAAK,GAAIC,OAAD,IAAa;AACzB,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACC,MAAN,CAAaY,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,UAAID,OAAO,KAAKX,KAAK,CAACC,MAAN,CAAaW,CAAb,EAAgBH,EAAhC,EAAoC;AAClC,eAAOG,CAAP;AACD;AACF;AACF,GAND;;AAQAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAACP,KAAK,CAACM,EAAP,CAAjB,EAjB4C,CAmB5C;;AACA,WAASO,QAAT,CAAkBC,OAAlB,EAA2B;AACzB,UAAMC,UAAU,GAAG,IAAIb,IAAJ,CAASY,OAAO,GAAG,GAAnB,CAAnB;AACA,WAAOC,UAAU,CAACC,cAAX,EAAP;AACD,GAvB2C,CAyB5C;;;AACA,WAASC,WAAT,CAAqBC,aAArB,EAAoCC,WAApC,EAAiD;AAC/C,UAAMlB,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAMa,UAAU,GAAG,IAAIb,IAAJ,CAASiB,WAAW,GAAG,GAAvB,CAAnB;AACA,UAAMC,SAAS,GAAGnB,KAAK,CAACoB,OAAN,KAAkBN,UAAU,CAACM,OAAX,EAApC;AACA,WAAOD,SAAS,GAAG,IAAZ,GAAmBF,aAA1B;AACD;;AAED,QAAMZ,EAAE,GAAGN,KAAK,CAACM,EAAjB;;AAEA,WAASgB,WAAT,CAAqBJ,aAArB,EAAoCC,WAApC,EAAiD;AAC/C,UAAMlB,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAMa,UAAU,GAAG,IAAIb,IAAJ,CAASiB,WAAW,GAAG,GAAvB,CAAnB;AACA,UAAMI,WAAW,GAAGtB,KAAK,CAACoB,OAAN,KAAkBN,UAAU,CAACM,OAAX,EAAtC;;AAEA,QAAIE,WAAW,GAAG,KAAd,IAAuBA,WAAW,GAAGL,aAAzC,EAAwD;AACtD,0BACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAC,iBAFZ;AAGE,QAAA,OAAO,EAAE,MAAM;AACbrB,UAAAA,KAAK,CAAC2B,UAAN,CAAiB3B,KAAK,CAACC,MAAvB,EAA+BQ,EAA/B;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KAZD,MAYO,IAAIW,WAAW,CAACC,aAAD,EAAgBC,WAAhB,CAAf,EAA6C;AAClD,0BACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAC,gBAFZ;AAGE,QAAA,OAAO,EAAE,MAAM;AACbtB,UAAAA,KAAK,CAAC2B,UAAN,CAAiB3B,KAAK,CAACC,MAAvB,EAA+BQ,EAA/B;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAWD,KAZM,MAYA;AACL,0BACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAC,iBAFZ;AAGE,QAAA,OAAO,EAAE,MAAM;AACbT,UAAAA,KAAK,CAAC2B,UAAN,CAAiB3B,KAAK,CAACC,MAAvB,EAA+BQ,EAA/B;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAWD;AACF;;AAED,WAASmB,aAAT,CAAuBP,aAAvB,EAAsCC,WAAtC,EAAmD;AACjD,UAAMlB,KAAK,GAAG,IAAIC,IAAJ,EAAd;AACA,UAAMa,UAAU,GAAG,IAAIb,IAAJ,CAASiB,WAAW,GAAG,GAAvB,CAAnB;AACA,UAAMI,WAAW,GAAGtB,KAAK,CAACoB,OAAN,KAAkBN,UAAU,CAACM,OAAX,EAAtC;;AACA,QAAIE,WAAW,GAAG,KAAd,IAAuBA,WAAW,GAAGL,aAAzC,EAAwD;AACtD,aAAO,SAAP;AACD,KAFD,MAEO;AACL,aAAO,SAAP;AACD;AACF,GAxF2C,CA0F5C;;;AACA,QAAMQ,WAAW,GAAG;AAClBC,IAAAA,aAAa,EAAE,MADG;AAElBC,IAAAA,MAAM,EAAE,mBAFU;AAGlBC,IAAAA,WAAW,EAAEZ,WAAW,CAACjB,KAAK,CAACkB,aAAP,EAAsBlB,KAAK,CAACmB,WAA5B,CAAX,GACT,SADS,GAETM,aAAa,CAACzB,KAAK,CAACkB,aAAP,EAAsBlB,KAAK,CAACmB,WAA5B;AALC,GAApB;AAQA,QAAMW,iBAAiB,GAAG;AACxBF,IAAAA,MAAM,EAAE,mBADgB;AAExBC,IAAAA,WAAW,EAAEZ,WAAW,CAACjB,KAAK,CAACkB,aAAP,EAAsBlB,KAAK,CAACmB,WAA5B,CAAX,GACT,SADS,GAETM,aAAa,CAACzB,KAAK,CAACkB,aAAP,EAAsBlB,KAAK,CAACmB,WAA5B;AAJO,GAA1B;AAOA,sBACE;AAAI,IAAA,KAAK,EAAEO,WAAX;AAAA,4BACE;AAAA,6BACE;AAAK,QAAA,GAAG,EAAE1B,KAAK,CAAC+B,GAAhB;AAAqB,QAAA,GAAG,EAAE/B,KAAK,CAACgC;AAAhC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAI,MAAA,KAAK,EAAEN,WAAX;AAAA,gBAAyB1B,KAAK,CAACgC;AAA/B;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAI,MAAA,KAAK,EAAEN,WAAX;AAAA,gBAAyBb,QAAQ,CAACb,KAAK,CAACmB,WAAP;AAAjC;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA,6BACE;AACE,QAAA,IAAI,EAAC,QADP;AAEE,QAAA,SAAS,EAAC,mBAFZ;AAGE,QAAA,OAAO,EAAE,MAAM;AACbtB,UAAAA,KAAK,CAACoC,WAAN,CAAkB1B,KAAK,CAACP,KAAK,CAACM,EAAP,CAAvB;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF,eAiBE;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAmC,MAAA,KAAK,EAAEwB,iBAA1C;AAAA,gBACGR,WAAW,CAACtB,KAAK,CAACkB,aAAP,EAAsBlB,KAAK,CAACmB,WAA5B;AADd;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD,CAjIiB,CAAlB","sourcesContent":["import React from \"react\";\n\n\nconst plantList = props.plants.map((plant) => {\n  // Todays date\n  const today = new Date();\n\n  // Plant index\n  const plantIndex = props.plants.findIndex((thisPlant) => {\n    thisPlant.id === plant.id;\n  });\n\n  const index = (plantID) => {\n    for (let i = 0; i < props.plants.length; i++) {\n      if (plantID === props.plants[i].id) {\n        return i;\n      }\n    }\n  };\n\n  console.log(index(plant.id));\n\n  // Date from api\n  function toString(watered) {\n    const todaysDate = new Date(watered + \"Z\");\n    return todaysDate.toLocaleString();\n  }\n\n  // Check if plant is well watered\n  function wellWatered(waterInterval, lastWatered) {\n    const today = new Date();\n    const todaysDate = new Date(lastWatered + \"Z\");\n    const diffInSec = today.getTime() - todaysDate.getTime();\n    return diffInSec / 1000 > waterInterval;\n  }\n\n  const id = plant.id;\n\n  function plantButton(waterInterval, lastWatered) {\n    const today = new Date();\n    const todaysDate = new Date(lastWatered + \"Z\");\n    const diffInWater = today.getTime() - todaysDate.getTime();\n\n    if (diffInWater > 30000 && diffInWater < waterInterval) {\n      return (\n        <button\n          type=\"button\"\n          className=\"btn btn-warning\"\n          onClick={() => {\n            props.waterPlant(props.plants, id);\n          }}\n        >\n          Thirsty 🤔\n        </button>\n      );\n    } else if (wellWatered(waterInterval, lastWatered)) {\n      return (\n        <button\n          type=\"button\"\n          className=\"btn btn-danger\"\n          onClick={() => {\n            props.waterPlant(props.plants, id);\n          }}\n        >\n          Water Me! 😠\n        </button>\n      );\n    } else {\n      return (\n        <button\n          type=\"button\"\n          className=\"btn btn-success\"\n          onClick={() => {\n            props.waterPlant(props.plants, id);\n          }}\n        >\n          I'm Full! 😀\n        </button>\n      );\n    }\n  }\n\n  function warningButton(waterInterval, lastWatered) {\n    const today = new Date();\n    const todaysDate = new Date(lastWatered + \"Z\");\n    const diffInWater = today.getTime() - todaysDate.getTime();\n    if (diffInWater > 30000 && diffInWater < waterInterval) {\n      return \"#E6D54E\";\n    } else {\n      return \"#74E64E\";\n    }\n  }\n\n  // Table row style\n  const waterStatus = {\n    paddingBottom: \"30px\",\n    border: \"0.2em solid black\",\n    borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n      ? \"#E6534E\"\n      : warningButton(plant.waterInterval, plant.lastWatered),\n  };\n\n  const waterButtonStatus = {\n    border: \"0.2em solid black\",\n    borderColor: wellWatered(plant.waterInterval, plant.lastWatered)\n      ? \"#E6534E\"\n      : warningButton(plant.waterInterval, plant.lastWatered),\n  };\n\n  return (\n    <tr style={waterStatus}>\n      <td>\n        <img src={plant.img} alt={plant.name} />\n      </td>\n      <td style={waterStatus}>{plant.name}</td>\n      <td style={waterStatus}>{toString(plant.lastWatered)}</td>\n      <td className=\"waterplants-button\">\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          onClick={() => {\n            props.deletePlant(index(plant.id));\n          }}\n        >\n          Remove Plant 😔\n        </button>\n      </td>\n      <td className=\"waterplants-button\" style={waterButtonStatus}>\n        {plantButton(plant.waterInterval, plant.lastWatered)}\n      </td>\n    </tr>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}